#!/usr/bin/env python
#import libraries
import os
import glob
import time
import RPi.GPIO as GPIO
import picamera
import tweepy

#set the GPIO mode
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

# camera settings
camera = picamera.PiCamera()
cam_res = (1024,768)
camera.led=False
camera.vflip=True
pics_taken=0
time.sleep(1)

#--------------------------------------
# Twitter settings
api_key='ENTER YOUR API KEY'
api_secret='ENTER YOU API SECRET'
access_token='ENTER YOUR ACCESS TOKEN'
token_secret='ENTER YOUR SECRET TOKEN'
auth=tweepy.OAuthHandler(api_key,api_secret)
auth.set_access_token(access_token,token_secret)
api=tweepy.API(auth)
my_twitter=api.me()
print my_twitter.name, "is connected! press CTRL + C to quit "

#---------------------------------------
#setup motion detection
#set a variable to hold GPIO pin identity
PinPIR=17

print 'PIR Module Test (CTRL-C to exit)'

#set pin as input
GPIO.setup(PinPIR,GPIO.IN)

#variables to hold the current and last states
Current_State=0
Previous_State=0

#---------------------------------------
# setup two 1-wire temperature probes 
# initialise temp probes
os.system('modprobe w1-gpio') #turns on the GPIO module
os.system('modprobe w1-therm') #turns on the temp module

#Finds the correct device file that holds the temp data
# REQUIRES EDIT HERE: Identify serial numbers for each temperature probe
base_dir='/sys/bus/w1/devices/'
device1=glob.glob(base_dir + '28-000005f250f8')[0]
device2=glob.glob(base_dir + '28-000006089f4b')[0]
device_file1 = device1 + '/w1_slave'
device_file2 = device2 + '/w1_slave'

# a function that reads the first sensors data
def read_ambient_raw():
	f=open(device_file1,'r') # opens the temp device file
	lines=f.readlines() #returns the text
	f.close()
	return lines

# a function that reads the 2nd sensors data
def read_pond_raw():
	f=open(device_file2, 'r')
	lines=f.readlines()
	f.close()
	return lines

#convert the value of the sensor to a temp
def ambient_temp():
	lines = read_ambient_raw() #read the temp 'device file'

#while the first line does not contain 'yes', wait for 0.2s and then read
	while lines[0].strip()[-3:] != 'YES':
		time.sleep(0.2)
		lines = read_ambient_raw()

#look for the position of the '=' in the second line of the device file
	equals_pos = lines[1].find('t=')

#if the '=' is found, covert to celsius
	if equals_pos != -1:
		temp_string=lines[1][equals_pos+2:]
		temp_C= float(temp_string) /1000.0
		return (temp_C)
		
# Evaluate pond temperature logger
def pond_temp():
	lines = read_pond_raw()
	while lines[0].strip()[-3:] != 'YES':
		time.sleep(0.2)
		lines = read_pond_raw()
	equals_pos=lines[1].find('t=')
	if equals_pos != -1:
		temp_string=lines[1][equals_pos+2:]
		temp_C=float(temp_string) / 1000.0
		return (temp_C)

# define the camera function
def take_picture(resolution):
	global pics_taken
	camera.resolution=resolution
	camera.capture(os.path.join('pics','image_' + str(pics_taken) + '.jpg'))
	pics_taken += 1
	print 'Picture taken! Tweeting'
	update_twitter()


# define twitter function
def update_twitter():
	api.update_with_media(os.path.join('pics','image_'+str(pics_taken - 1) + '.jpg'),status= 'Just spotted! Air temp: %s, Pond temp: %s' %(ambient_temp(),
pond_temp()))
	print 'status updated!'
	time.sleep=(60)


### MAIN PROGRAM LOOP ###
try:
        print 'Waiting for PIR to settle...'
        #loop until PIR output is 0
        while GPIO.input(PinPIR)==1:
                Current_State = 0
        print '   Ready '
        #loop until users quites with CTRL-C
        while True:
                #Read PIR
                Current_State=GPIO.input(PinPIR)

                #If the PIR is triggered
                if Current_State==1 and Previous_State==0:
                        print 'Motion detected... taking measurements!'
			print 'Ambient temp: %s, Pond temp: %s' %(ambient_temp(),pond_temp())
                	take_picture(cam_res)
        
		#record previous state
                        Previous_State=1
                elif Current_State==0 and Previous_State==1:
                        print 'Ready to detect movement'
                        Previous_State=0


except KeyboardInterrupt:
        print ' Quit'

        #reset setting
        camera.close()
	GPIO.cleanup()




